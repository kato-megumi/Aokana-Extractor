#! /usr/bin/env python3

import struct
import os
import sys
import numpy as np

# 32 Bits module
global mod, mod1
mod = 2 ** 32
mod1 = 2 ** 31

# Generate Key array 
def gk(k):
    a = (k * 7391 + 42828) % mod
    b = (a << 17 ^ a) % mod
    out = []
    for _ in range(256):
        a = (a - k + b) % mod
        b = (a + 56) % mod
        a = (a * (b & 239)) % mod
        out.append(a & 255)
        a = a >> 1
    return out

# decrypt data with key(Generated by k)
def dd(data, k):
    data = np.frombuffer(data,dtype='uint8')
    datalen = len(data)
    key = np.array(gk(k),dtype='uint8')
    data = (np.resize(data, (-(-datalen//253),253)) ^ key[:253]).ravel()[:datalen]
    return ((np.resize(data, (-(-datalen//89),89)) + 3 + key[:89]).ravel()[:datalen] ^ 153).tobytes()


# Parse file header and get file list & location for decrypt
def getInfo(f):
    f.seek(0)
    header = f.read(1024)
    num = 0
    num = (sum(struct.unpack(251 * "i", header[16:-4])) + mod1) % mod - mod1
    raw = dd(f.read(16 * num), struct.unpack("I", header[212:216])[0])
    start = struct.unpack("I", raw[12:16])[0]
    array = dd(f.read(start - 1024 - 16 * num), struct.unpack("I", header[92:96])[0])
    out = []
    for i in range(num):
        l, offset, k, p = struct.unpack("IIII", raw[16 * i:16 * (i + 1)])
        name = array[offset:array.find(0, offset)].decode("ascii")
        out.append((name, p, l, k))
    return out

# Locate position, create file, then write decrypted binaries
def extract(f, files, out):
    for name, p, l, k in files:
        print("Extracting file %s ..." % name, end="")
        name = os.path.join(out, name)
        os.makedirs(os.path.dirname(name), exist_ok=True)
        with open(name, "wb") as o:
            f.seek(p)
            data = dd(f.read(l), k)
            o.write(data)
            print("Done.", end="\n")

# Entry: argv1-> .dat file path; argv2-> output path
if __name__ == "__main__":
    path = sys.argv[1]
    f = open(path, "rb")
    files = getInfo(f)
    if len(sys.argv) == 3:
        extract(f, files, sys.argv[2])
    elif len(sys.argv) == 2:
        for item in files:
            print(item[0], item[2], "\tKByte(s)")
